#!perl
use v5.32.0;
use warnings;

# usage: build-rfc-index rfc-index.xml
# ...probably retrieved from https://www.rfc-editor.org/in-notes/rfc-index.xml

use DBD::SQLite;
use JSON::MaybeXS;
use XML::LibXML;

die "filename not given or does not exist" unless $ARGV[0] && -r $ARGV[0];

my $doc = XML::LibXML->new->parse_file($ARGV[0]);

my $dbh = DBI->connect('dbi:SQLite:rfc-index.sqlite', undef, undef);
$dbh->do(
  "CREATE TABLE rfcs (
    rfc_number integer not null primary key,
    metadata   text not null
  )"
) or die "can't create table";

my $JSON = JSON::MaybeXS->new->canonical;

sub element_text {
  my ($start_elem, $name) = @_;

  my ($want_elem)  = $start_elem->getElementsByTagName($name);
  return unless $want_elem;
  return $want_elem->textContent;
}

my $xc = XML::LibXML::XPathContext->new;
$xc->registerNs('rfc', 'http://www.rfc-editor.org/rfc-index');

my $rfcs = $xc->findnodes('//rfc:rfc-entry', $doc);
for my $rfc ($rfcs->get_nodelist) {
  my ($doc_id) = $xc->findvalue('rfc:doc-id/text()', $rfc);
  my ($title)  = $xc->findvalue('rfc:title/text()', $rfc);
  my @authors  = map {; "$_" }
                 $xc->findnodes('rfc:author/rfc:name/text()', $rfc);
  my ($abstract) = $xc->findvalue('rfc:abstract/*/text()', $rfc);

  my $year  = $xc->findvalue('rfc:date/rfc:year/text()', $rfc);
  my $month = $xc->findvalue('rfc:date/rfc:month/text()', $rfc);

  my @obs = map  {; 0+$_ }
            grep {; s/^RFC// }
            map  {; "$_" }
            $xc->findnodes('rfc:obsoletes/rfc:doc-id/text()', $rfc);

  my @obs_by = map  {; 0+$_ }
               grep {; s/^RFC// }
               map  {; "$_" }
               $xc->findnodes('rfc:obsoleted-by/rfc:doc-id/text()', $rfc);

  my $status = $xc->findvalue('rfc:current-status/text()', $rfc);

  # updated-by/doc-id
  # current-status

  my $number   = 0 + ($doc_id =~ s/^RFC//r);
  my %metadata = (
    abstract => $abstract,
    authors  => \@authors,
    date     => "$month $year",
    number   => 0+$number,
    status   => $status,
    title    => $title,
    obsoletes     => [ sort {; $a <=> $b } @obs ],
    obsoleted_by  => [ sort {; $a <=> $b } @obs_by ],
  );

  warn "$number...\n";
  $dbh->do(
    "INSERT INTO rfcs (rfc_number, metadata) VALUES (?, ?)",
    undef,
    0+$number,
    $JSON->encode(\%metadata)
  );
}

$dbh->disconnect;
